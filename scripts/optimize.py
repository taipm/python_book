#!/usr/bin/env python3
"""
Python Book Website Optimization Script
T·ªëi ∆∞u h√≥a performance v√† SEO cho website
"""

import os
import sys
import json
import gzip
import shutil
from pathlib import Path
from typing import Dict, List, Optional
import subprocess
import time

class WebsiteOptimizer:
    """T·ªëi ∆∞u h√≥a website Python Book"""
    
    def __init__(self, docs_dir: str = "docs"):
        self.docs_dir = Path(docs_dir)
        self.build_dir = self.docs_dir / "_site"
        self.assets_dir = self.docs_dir / "assets"
        
        # Statistics
        self.stats = {
            "files_processed": 0,
            "bytes_saved": 0,
            "errors": []
        }
    
    def run_optimization(self):
        """Ch·∫°y t·∫•t c·∫£ optimizations"""
        print("üöÄ B·∫Øt ƒë·∫ßu t·ªëi ∆∞u h√≥a Python Book website...")
        start_time = time.time()
        
        try:
            # 1. Ki·ªÉm tra m√¥i tr∆∞·ªùng
            self.check_environment()
            
            # 2. Build Jekyll site
            self.build_jekyll_site()
            
            # 3. T·ªëi ∆∞u CSS
            self.optimize_css()
            
            # 4. T·ªëi ∆∞u JavaScript
            self.optimize_javascript()
            
            # 5. T·ªëi ∆∞u h√¨nh ·∫£nh
            self.optimize_images()
            
            # 6. T·∫°o gzip files
            self.create_gzip_files()
            
            # 7. Generate sitemap
            self.generate_sitemap()
            
            # 8. Validate HTML
            self.validate_html()
            
            # 9. Performance audit
            self.performance_audit()
            
            # 10. B√°o c√°o k·∫øt qu·∫£
            self.print_report(time.time() - start_time)
            
        except Exception as e:
            print(f"‚ùå L·ªói trong qu√° tr√¨nh t·ªëi ∆∞u: {e}")
            sys.exit(1)
    
    def check_environment(self):
        """Ki·ªÉm tra m√¥i tr∆∞·ªùng v√† dependencies"""
        print("üîç Ki·ªÉm tra m√¥i tr∆∞·ªùng...")
        
        # Ki·ªÉm tra Jekyll
        try:
            subprocess.run(["jekyll", "--version"], 
                         capture_output=True, check=True)
            print("‚úÖ Jekyll ƒë√£ c√†i ƒë·∫∑t")
        except (subprocess.CalledProcessError, FileNotFoundError):
            print("‚ùå Jekyll ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t")
            print("C√†i ƒë·∫∑t: gem install jekyll bundler")
            sys.exit(1)
        
        # Ki·ªÉm tra th∆∞ m·ª•c docs
        if not self.docs_dir.exists():
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c {self.docs_dir}")
            sys.exit(1)
        
        print("‚úÖ M√¥i tr∆∞·ªùng OK")
    
    def build_jekyll_site(self):
        """Build Jekyll site"""
        print("üèóÔ∏è Building Jekyll site...")
        
        try:
            result = subprocess.run(
                ["jekyll", "build", "--source", str(self.docs_dir)],
                capture_output=True,
                text=True,
                check=True
            )
            print("‚úÖ Jekyll build th√†nh c√¥ng")
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Jekyll build th·∫•t b·∫°i: {e.stderr}")
            sys.exit(1)
    
    def optimize_css(self):
        """T·ªëi ∆∞u CSS files"""
        print("üé® T·ªëi ∆∞u CSS...")
        
        css_files = list(self.build_dir.rglob("*.css"))
        
        for css_file in css_files:
            try:
                # ƒê·ªçc file CSS
                content = css_file.read_text(encoding='utf-8')
                original_size = len(content)
                
                # Minify CSS (basic)
                minified = self.minify_css(content)
                
                # Ghi l·∫°i file
                css_file.write_text(minified, encoding='utf-8')
                
                # C·∫≠p nh·∫≠t stats
                saved = original_size - len(minified)
                self.stats["bytes_saved"] += saved
                self.stats["files_processed"] += 1
                
                print(f"  ‚úÖ {css_file.name}: -{saved} bytes")
                
            except Exception as e:
                error_msg = f"L·ªói t·ªëi ∆∞u CSS {css_file}: {e}"
                self.stats["errors"].append(error_msg)
                print(f"  ‚ùå {error_msg}")
    
    def minify_css(self, css_content: str) -> str:
        """Minify CSS content (basic implementation)"""
        import re
        
        # Remove comments
        css_content = re.sub(r'/\*.*?\*/', '', css_content, flags=re.DOTALL)
        
        # Remove extra whitespace
        css_content = re.sub(r'\s+', ' ', css_content)
        
        # Remove whitespace around specific characters
        css_content = re.sub(r'\s*([{}:;,>+~])\s*', r'\1', css_content)
        
        # Remove trailing semicolons
        css_content = re.sub(r';}', '}', css_content)
        
        return css_content.strip()
    
    def optimize_javascript(self):
        """T·ªëi ∆∞u JavaScript files"""
        print("‚ö° T·ªëi ∆∞u JavaScript...")
        
        js_files = list(self.build_dir.rglob("*.js"))
        
        for js_file in js_files:
            try:
                # ƒê·ªçc file JS
                content = js_file.read_text(encoding='utf-8')
                original_size = len(content)
                
                # Basic minification
                minified = self.minify_js(content)
                
                # Ghi l·∫°i file
                js_file.write_text(minified, encoding='utf-8')
                
                # C·∫≠p nh·∫≠t stats
                saved = original_size - len(minified)
                self.stats["bytes_saved"] += saved
                self.stats["files_processed"] += 1
                
                print(f"  ‚úÖ {js_file.name}: -{saved} bytes")
                
            except Exception as e:
                error_msg = f"L·ªói t·ªëi ∆∞u JS {js_file}: {e}"
                self.stats["errors"].append(error_msg)
                print(f"  ‚ùå {error_msg}")
    
    def minify_js(self, js_content: str) -> str:
        """Minify JavaScript content (basic implementation)"""
        import re
        
        # Remove single-line comments (but preserve URLs)
        js_content = re.sub(r'(?<!:)//.*$', '', js_content, flags=re.MULTILINE)
        
        # Remove multi-line comments
        js_content = re.sub(r'/\*.*?\*/', '', js_content, flags=re.DOTALL)
        
        # Remove extra whitespace
        js_content = re.sub(r'\s+', ' ', js_content)
        
        # Remove whitespace around operators
        js_content = re.sub(r'\s*([{}();,=+\-*/<>!&|])\s*', r'\1', js_content)
        
        return js_content.strip()
    
    def optimize_images(self):
        """T·ªëi ∆∞u h√¨nh ·∫£nh"""
        print("üñºÔ∏è T·ªëi ∆∞u h√¨nh ·∫£nh...")
        
        image_extensions = ['.jpg', '.jpeg', '.png', '.gif', '.svg']
        image_files = []
        
        for ext in image_extensions:
            image_files.extend(self.build_dir.rglob(f"*{ext}"))
        
        for image_file in image_files:
            try:
                original_size = image_file.stat().st_size
                
                # T·ªëi ∆∞u d·ª±a tr√™n lo·∫°i file
                if image_file.suffix.lower() == '.svg':
                    self.optimize_svg(image_file)
                
                # C·∫≠p nh·∫≠t stats
                new_size = image_file.stat().st_size
                saved = original_size - new_size
                
                if saved > 0:
                    self.stats["bytes_saved"] += saved
                    self.stats["files_processed"] += 1
                    print(f"  ‚úÖ {image_file.name}: -{saved} bytes")
                
            except Exception as e:
                error_msg = f"L·ªói t·ªëi ∆∞u image {image_file}: {e}"
                self.stats["errors"].append(error_msg)
                print(f"  ‚ùå {error_msg}")
    
    def optimize_svg(self, svg_file: Path):
        """T·ªëi ∆∞u SVG file"""
        import re
        
        content = svg_file.read_text(encoding='utf-8')
        
        # Remove comments
        content = re.sub(r'<!--.*?-->', '', content, flags=re.DOTALL)
        
        # Remove extra whitespace
        content = re.sub(r'\s+', ' ', content)
        content = re.sub(r'>\s+<', '><', content)
        
        svg_file.write_text(content.strip(), encoding='utf-8')
    
    def create_gzip_files(self):
        """T·∫°o gzip files cho static assets"""
        print("üóúÔ∏è T·∫°o gzip files...")
        
        # File types to gzip
        gzip_extensions = ['.html', '.css', '.js', '.json', '.xml', '.txt']
        
        for ext in gzip_extensions:
            files = list(self.build_dir.rglob(f"*{ext}"))
            
            for file_path in files:
                try:
                    # T·∫°o gzip version
                    gzip_path = file_path.with_suffix(file_path.suffix + '.gz')
                    
                    with open(file_path, 'rb') as f_in:
                        with gzip.open(gzip_path, 'wb') as f_out:
                            shutil.copyfileobj(f_in, f_out)
                    
                    # Ki·ªÉm tra compression ratio
                    original_size = file_path.stat().st_size
                    compressed_size = gzip_path.stat().st_size
                    ratio = (1 - compressed_size / original_size) * 100
                    
                    if ratio > 10:  # Ch·ªâ gi·ªØ n·∫øu ti·∫øt ki·ªám > 10%
                        self.stats["files_processed"] += 1
                        print(f"  ‚úÖ {file_path.name}.gz: {ratio:.1f}% smaller")
                    else:
                        gzip_path.unlink()  # X√≥a n·∫øu kh√¥ng hi·ªáu qu·∫£
                        
                except Exception as e:
                    error_msg = f"L·ªói t·∫°o gzip {file_path}: {e}"
                    self.stats["errors"].append(error_msg)
                    print(f"  ‚ùå {error_msg}")
    
    def generate_sitemap(self):
        """Generate sitemap.xml"""
        print("üó∫Ô∏è T·∫°o sitemap...")
        
        try:
            # T√¨m t·∫•t c·∫£ HTML files
            html_files = list(self.build_dir.rglob("*.html"))
            
            # T·∫°o sitemap XML
            sitemap_content = self.create_sitemap_xml(html_files)
            
            # Ghi sitemap
            sitemap_path = self.build_dir / "sitemap.xml"
            sitemap_path.write_text(sitemap_content, encoding='utf-8')
            
            print(f"  ‚úÖ Sitemap t·∫°o v·ªõi {len(html_files)} URLs")
            
        except Exception as e:
            error_msg = f"L·ªói t·∫°o sitemap: {e}"
            self.stats["errors"].append(error_msg)
            print(f"  ‚ùå {error_msg}")
    
    def create_sitemap_xml(self, html_files: List[Path]) -> str:
        """T·∫°o n·ªôi dung sitemap XML"""
        from datetime import datetime
        
        base_url = "https://taipm.github.io/python_book"
        current_date = datetime.now().strftime("%Y-%m-%d")
        
        urls = []
        for html_file in html_files:
            # T·∫°o relative URL
            rel_path = html_file.relative_to(self.build_dir)
            url = f"{base_url}/{rel_path}".replace("\\", "/")
            
            # X√°c ƒë·ªãnh priority d·ª±a tr√™n file
            if rel_path.name == "index.html":
                priority = "1.0"
            elif "chapter" in str(rel_path):
                priority = "0.8"
            else:
                priority = "0.6"
            
            urls.append(f"""  <url>
    <loc>{url}</loc>
    <lastmod>{current_date}</lastmod>
    <priority>{priority}</priority>
  </url>""")
        
        return f"""<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
{chr(10).join(urls)}
</urlset>"""
    
    def validate_html(self):
        """Validate HTML files"""
        print("‚úÖ Validate HTML...")
        
        html_files = list(self.build_dir.rglob("*.html"))
        issues = []
        
        for html_file in html_files[:5]:  # Ch·ªâ check 5 files ƒë·∫ßu
            try:
                content = html_file.read_text(encoding='utf-8')
                
                # Basic HTML validation
                html_issues = self.basic_html_validation(content, html_file.name)
                issues.extend(html_issues)
                
            except Exception as e:
                issues.append(f"L·ªói ƒë·ªçc {html_file}: {e}")
        
        if issues:
            print(f"  ‚ö†Ô∏è T√¨m th·∫•y {len(issues)} v·∫•n ƒë·ªÅ HTML")
            for issue in issues[:10]:  # Ch·ªâ hi·ªÉn th·ªã 10 ƒë·∫ßu
                print(f"    - {issue}")
        else:
            print("  ‚úÖ HTML validation OK")
    
    def basic_html_validation(self, content: str, filename: str) -> List[str]:
        """Basic HTML validation"""
        import re
        issues = []
        
        # Check for missing alt attributes
        img_tags = re.findall(r'<img[^>]*>', content)
        for img in img_tags:
            if 'alt=' not in img:
                issues.append(f"{filename}: <img> thi·∫øu alt attribute")
        
        # Check for missing title
        if '<title>' not in content:
            issues.append(f"{filename}: Thi·∫øu <title> tag")
        
        # Check for missing meta description
        if 'name="description"' not in content:
            issues.append(f"{filename}: Thi·∫øu meta description")
        
        return issues
    
    def performance_audit(self):
        """Ki·ªÉm tra performance c∆° b·∫£n"""
        print("‚ö° Performance audit...")
        
        try:
            # T√≠nh t·ªïng k√≠ch th∆∞·ªõc files
            total_size = 0
            file_count = 0
            
            for file_path in self.build_dir.rglob("*"):
                if file_path.is_file():
                    total_size += file_path.stat().st_size
                    file_count += 1
            
            # T√≠nh k√≠ch th∆∞·ªõc theo lo·∫°i file
            css_size = sum(f.stat().st_size for f in self.build_dir.rglob("*.css"))
            js_size = sum(f.stat().st_size for f in self.build_dir.rglob("*.js"))
            html_size = sum(f.stat().st_size for f in self.build_dir.rglob("*.html"))
            
            print(f"  üìä T·ªïng k√≠ch th∆∞·ªõc: {total_size / 1024:.1f} KB ({file_count} files)")
            print(f"  üìÑ HTML: {html_size / 1024:.1f} KB")
            print(f"  üé® CSS: {css_size / 1024:.1f} KB")
            print(f"  ‚ö° JS: {js_size / 1024:.1f} KB")
            
            # Recommendations
            if css_size > 100 * 1024:  # > 100KB
                print("  ‚ö†Ô∏è CSS files kh√° l·ªõn, c√¢n nh·∫Øc code splitting")
            
            if js_size > 200 * 1024:  # > 200KB
                print("  ‚ö†Ô∏è JS files kh√° l·ªõn, c√¢n nh·∫Øc lazy loading")
                
        except Exception as e:
            print(f"  ‚ùå L·ªói performance audit: {e}")
    
    def print_report(self, duration: float):
        """In b√°o c√°o k·∫øt qu·∫£"""
        print("\n" + "="*50)
        print("üìä B√ÅO C√ÅO T·ªêI ∆ØU H√ìA")
        print("="*50)
        
        print(f"‚è±Ô∏è Th·ªùi gian: {duration:.2f}s")
        print(f"üìÅ Files x·ª≠ l√Ω: {self.stats['files_processed']}")
        print(f"üíæ Ti·∫øt ki·ªám: {self.stats['bytes_saved'] / 1024:.1f} KB")
        
        if self.stats['errors']:
            print(f"‚ùå L·ªói: {len(self.stats['errors'])}")
            for error in self.stats['errors'][:5]:
                print(f"   - {error}")
        
        print("\nüéâ T·ªëi ∆∞u h√≥a ho√†n t·∫•t!")
        print("üöÄ Website s·∫µn s√†ng deploy!")


def main():
    """Main function"""
    import argparse
    
    parser = argparse.ArgumentParser(description="T·ªëi ∆∞u Python Book website")
    parser.add_argument("--docs-dir", default="docs", 
                       help="Th∆∞ m·ª•c docs (default: docs)")
    parser.add_argument("--skip-build", action="store_true",
                       help="B·ªè qua Jekyll build")
    
    args = parser.parse_args()
    
    optimizer = WebsiteOptimizer(args.docs_dir)
    
    if args.skip_build:
        print("‚è≠Ô∏è B·ªè qua Jekyll build")
        optimizer.build_jekyll_site = lambda: None
    
    optimizer.run_optimization()


if __name__ == "__main__":
    main()